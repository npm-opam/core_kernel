<**/*.ml{,i}>: warn(-40), no_alias_deps
<**/*>: thread
# This prevents the implicit addition of -ppx options by ocamlfind
<**/*>: predicate(custom_ppx)
<src/*.ml>: for-pack(Core_kernel)
<src/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-drop -bench-drop -inline-test-lib fake_for_drop)
<src/*.ml{,i}>: pp_deps_for_src
<namespace_wrappers/*>: warn(-49)
"namespace_wrappers": include
<src/*.c>: needs_headers
<check_caml_modify/*>: caml_modify_wrapper
# OASIS_START
# DO NOT EDIT (digest: b53194d757f3d4bda691af8f30ca6192)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library core_kernel
"src/core_kernel.cmxs": use_core_kernel
"src/applicative.cmx": for-pack(Core_kernel)
"src/applicative_intf.cmx": for-pack(Core_kernel)
"src/array_permute.cmx": for-pack(Core_kernel)
"src/avltree.cmx": for-pack(Core_kernel)
"src/avltree_unit_tests.cmx": for-pack(Core_kernel)
"src/backtrace.cmx": for-pack(Core_kernel)
"src/bag.cmx": for-pack(Core_kernel)
"src/bigbuffer.cmx": for-pack(Core_kernel)
"src/bigbuffer_internal.cmx": for-pack(Core_kernel)
"src/bigstring.cmx": for-pack(Core_kernel)
"src/bigstring_marshal.cmx": for-pack(Core_kernel)
"src/bigsubstring.cmx": for-pack(Core_kernel)
"src/binable.cmx": for-pack(Core_kernel)
"src/binable0.cmx": for-pack(Core_kernel)
"src/binable_and_sexpable_unit_tests.cmx": for-pack(Core_kernel)
"src/binary_packing.cmx": for-pack(Core_kernel)
"src/binary_searchable.cmx": for-pack(Core_kernel)
"src/binary_searchable_intf.cmx": for-pack(Core_kernel)
"src/blang.cmx": for-pack(Core_kernel)
"src/blit.cmx": for-pack(Core_kernel)
"src/blit_intf.cmx": for-pack(Core_kernel)
"src/bool.cmx": for-pack(Core_kernel)
"src/bounded_int_table.cmx": for-pack(Core_kernel)
"src/bucket.cmx": for-pack(Core_kernel)
"src/bus.cmx": for-pack(Core_kernel)
"src/bus_unit_tests.cmx": for-pack(Core_kernel)
"src/byte_units.cmx": for-pack(Core_kernel)
"src/caml.cmx": for-pack(Core_kernel)
"src/common.cmx": for-pack(Core_kernel)
"src/commutative_group.cmx": for-pack(Core_kernel)
"src/comparable.cmx": for-pack(Core_kernel)
"src/comparable_intf.cmx": for-pack(Core_kernel)
"src/comparator.cmx": for-pack(Core_kernel)
"src/constrained_float.cmx": for-pack(Core_kernel)
"src/container.cmx": for-pack(Core_kernel)
"src/container_intf.cmx": for-pack(Core_kernel)
"src/container_unit_tests.cmx": for-pack(Core_kernel)
"src/core_arg.cmx": for-pack(Core_kernel)
"src/core_array.cmx": for-pack(Core_kernel)
"src/core_bin_prot.cmx": for-pack(Core_kernel)
"src/core_bytes.cmx": for-pack(Core_kernel)
"src/core_char.cmx": for-pack(Core_kernel)
"src/core_field.cmx": for-pack(Core_kernel)
"src/core_gc.cmx": for-pack(Core_kernel)
"src/core_gc_unit_tests.cmx": for-pack(Core_kernel)
"src/core_hashtbl.cmx": for-pack(Core_kernel)
"src/core_hashtbl_intf.cmx": for-pack(Core_kernel)
"src/core_int.cmx": for-pack(Core_kernel)
"src/core_int32.cmx": for-pack(Core_kernel)
"src/core_int63.cmx": for-pack(Core_kernel)
"src/core_int64.cmx": for-pack(Core_kernel)
"src/core_lazy.cmx": for-pack(Core_kernel)
"src/core_list.cmx": for-pack(Core_kernel)
"src/core_list0.cmx": for-pack(Core_kernel)
"src/core_list_unit_tests.cmx": for-pack(Core_kernel)
"src/core_map.cmx": for-pack(Core_kernel)
"src/core_map_bench.cmx": for-pack(Core_kernel)
"src/core_map_intf.cmx": for-pack(Core_kernel)
"src/core_map_unit_tests.cmx": for-pack(Core_kernel)
"src/core_nativeint.cmx": for-pack(Core_kernel)
"src/core_pervasives.cmx": for-pack(Core_kernel)
"src/core_printexc.cmx": for-pack(Core_kernel)
"src/core_printf.cmx": for-pack(Core_kernel)
"src/core_queue.cmx": for-pack(Core_kernel)
"src/core_queue_debug.cmx": for-pack(Core_kernel)
"src/core_queue_unit_tests.cmx": for-pack(Core_kernel)
"src/core_random.cmx": for-pack(Core_kernel)
"src/core_result.cmx": for-pack(Core_kernel)
"src/core_set.cmx": for-pack(Core_kernel)
"src/core_set_intf.cmx": for-pack(Core_kernel)
"src/core_set_unit_tests.cmx": for-pack(Core_kernel)
"src/core_sexp.cmx": for-pack(Core_kernel)
"src/core_stack.cmx": for-pack(Core_kernel)
"src/core_string.cmx": for-pack(Core_kernel)
"src/core_string_unit_tests.cmx": for-pack(Core_kernel)
"src/core_weak.cmx": for-pack(Core_kernel)
"src/day_of_week.cmx": for-pack(Core_kernel)
"src/debug.cmx": for-pack(Core_kernel)
"src/decimal.cmx": for-pack(Core_kernel)
"src/deque.cmx": for-pack(Core_kernel)
"src/dequeue.cmx": for-pack(Core_kernel)
"src/doubly_linked.cmx": for-pack(Core_kernel)
"src/either.cmx": for-pack(Core_kernel)
"src/either_intf.cmx": for-pack(Core_kernel)
"src/equal.cmx": for-pack(Core_kernel)
"src/error.cmx": for-pack(Core_kernel)
"src/error_unit_tests.cmx": for-pack(Core_kernel)
"src/exn.cmx": for-pack(Core_kernel)
"src/fdeque.cmx": for-pack(Core_kernel)
"src/fheap.cmx": for-pack(Core_kernel)
"src/flags.cmx": for-pack(Core_kernel)
"src/flags_intf.cmx": for-pack(Core_kernel)
"src/flat_array.cmx": for-pack(Core_kernel)
"src/flat_array_debug.cmx": for-pack(Core_kernel)
"src/flat_array_unit_tests.cmx": for-pack(Core_kernel)
"src/flat_queue.cmx": for-pack(Core_kernel)
"src/flat_queue_debug.cmx": for-pack(Core_kernel)
"src/flat_queue_unit_tests.cmx": for-pack(Core_kernel)
"src/float.cmx": for-pack(Core_kernel)
"src/float_intf.cmx": for-pack(Core_kernel)
"src/float_robust_compare.cmx": for-pack(Core_kernel)
"src/floatable.cmx": for-pack(Core_kernel)
"src/fn.cmx": for-pack(Core_kernel)
"src/force_once.cmx": for-pack(Core_kernel)
"src/fqueue.cmx": for-pack(Core_kernel)
"src/hash_heap.cmx": for-pack(Core_kernel)
"src/hash_queue.cmx": for-pack(Core_kernel)
"src/hash_set.cmx": for-pack(Core_kernel)
"src/hash_set_intf.cmx": for-pack(Core_kernel)
"src/hashable.cmx": for-pack(Core_kernel)
"src/hashtbl_unit_tests.cmx": for-pack(Core_kernel)
"src/heap.cmx": for-pack(Core_kernel)
"src/heap_block.cmx": for-pack(Core_kernel)
"src/heap_intf.cmx": for-pack(Core_kernel)
"src/hex_lexer.cmx": for-pack(Core_kernel)
"src/host_and_port.cmx": for-pack(Core_kernel)
"src/identifiable.cmx": for-pack(Core_kernel)
"src/in_channel.cmx": for-pack(Core_kernel)
"src/info.cmx": for-pack(Core_kernel)
"src/info_intf.cmx": for-pack(Core_kernel)
"src/info_unit_tests.cmx": for-pack(Core_kernel)
"src/int_conversions.cmx": for-pack(Core_kernel)
"src/int_intf.cmx": for-pack(Core_kernel)
"src/int_math.cmx": for-pack(Core_kernel)
"src/int_pow2.cmx": for-pack(Core_kernel)
"src/int_replace_polymorphic_compare.cmx": for-pack(Core_kernel)
"src/int_set.cmx": for-pack(Core_kernel)
"src/intable.cmx": for-pack(Core_kernel)
"src/interfaces.cmx": for-pack(Core_kernel)
"src/invariant.cmx": for-pack(Core_kernel)
"src/invariant_intf.cmx": for-pack(Core_kernel)
"src/linked_queue.cmx": for-pack(Core_kernel)
"src/linked_stack.cmx": for-pack(Core_kernel)
"src/make_substring.cmx": for-pack(Core_kernel)
"src/maybe_bound.cmx": for-pack(Core_kernel)
"src/memo.cmx": for-pack(Core_kernel)
"src/monad.cmx": for-pack(Core_kernel)
"src/monad_intf.cmx": for-pack(Core_kernel)
"src/month.cmx": for-pack(Core_kernel)
"src/never_returns.cmx": for-pack(Core_kernel)
"src/no_polymorphic_compare.cmx": for-pack(Core_kernel)
"src/nothing.cmx": for-pack(Core_kernel)
"src/nothing0.cmx": for-pack(Core_kernel)
"src/obj_array.cmx": for-pack(Core_kernel)
"src/only_in_test.cmx": for-pack(Core_kernel)
"src/option.cmx": for-pack(Core_kernel)
"src/or_error.cmx": for-pack(Core_kernel)
"src/or_error_unit_tests.cmx": for-pack(Core_kernel)
"src/ordered_collection_common.cmx": for-pack(Core_kernel)
"src/ordering.cmx": for-pack(Core_kernel)
"src/out_channel.cmx": for-pack(Core_kernel)
"src/percent.cmx": for-pack(Core_kernel)
"src/perms.cmx": for-pack(Core_kernel)
"src/pid.cmx": for-pack(Core_kernel)
"src/poly.cmx": for-pack(Core_kernel)
"src/polymorphic_compare.cmx": for-pack(Core_kernel)
"src/polymorphic_compare_intf.cmx": for-pack(Core_kernel)
"src/pool.cmx": for-pack(Core_kernel)
"src/pool_intf.cmx": for-pack(Core_kernel)
"src/pool_unit_tests.cmx": for-pack(Core_kernel)
"src/pooled_hashtbl.cmx": for-pack(Core_kernel)
"src/pooled_hashtbl_unit_test.cmx": for-pack(Core_kernel)
"src/pow_overflow_bounds.cmx": for-pack(Core_kernel)
"src/pretty_printer.cmx": for-pack(Core_kernel)
"src/quickcheck.cmx": for-pack(Core_kernel)
"src/quickcheck_bench.cmx": for-pack(Core_kernel)
"src/quickcheck_intf.cmx": for-pack(Core_kernel)
"src/quickcheck_unit_tests.cmx": for-pack(Core_kernel)
"src/quickcheckable.cmx": for-pack(Core_kernel)
"src/ref.cmx": for-pack(Core_kernel)
"src/ref_unit_tests.cmx": for-pack(Core_kernel)
"src/result_wrapper.cmx": for-pack(Core_kernel)
"src/robustly_comparable.cmx": for-pack(Core_kernel)
"src/rope.cmx": for-pack(Core_kernel)
"src/sequence.cmx": for-pack(Core_kernel)
"src/set_once.cmx": for-pack(Core_kernel)
"src/sexpable.cmx": for-pack(Core_kernel)
"src/sign.cmx": for-pack(Core_kernel)
"src/sign0.cmx": for-pack(Core_kernel)
"src/source_code_position.cmx": for-pack(Core_kernel)
"src/source_code_position0.cmx": for-pack(Core_kernel)
"src/stable.cmx": for-pack(Core_kernel)
"src/stable_containers.cmx": for-pack(Core_kernel)
"src/stable_internal.cmx": for-pack(Core_kernel)
"src/stable_module_types.cmx": for-pack(Core_kernel)
"src/stable_unit_test.cmx": for-pack(Core_kernel)
"src/stable_unit_test_intf.cmx": for-pack(Core_kernel)
"src/stack_intf.cmx": for-pack(Core_kernel)
"src/stack_unit_tests.cmx": for-pack(Core_kernel)
"src/staged.cmx": for-pack(Core_kernel)
"src/std.cmx": for-pack(Core_kernel)
"src/std_common.cmx": for-pack(Core_kernel)
"src/std_internal.cmx": for-pack(Core_kernel)
"src/std_kernel.cmx": for-pack(Core_kernel)
"src/std_unit_tests.cmx": for-pack(Core_kernel)
"src/string_id.cmx": for-pack(Core_kernel)
"src/stringable.cmx": for-pack(Core_kernel)
"src/substring.cmx": for-pack(Core_kernel)
"src/substring_intf.cmx": for-pack(Core_kernel)
"src/t.cmx": for-pack(Core_kernel)
"src/thread_safe_queue.cmx": for-pack(Core_kernel)
"src/time_ns.cmx": for-pack(Core_kernel)
"src/time_ns_alternate_sexp.cmx": for-pack(Core_kernel)
"src/timing_wheel_debug.cmx": for-pack(Core_kernel)
"src/timing_wheel_intf.cmx": for-pack(Core_kernel)
"src/timing_wheel_ns.cmx": for-pack(Core_kernel)
"src/timing_wheel_ns_unit_tests.cmx": for-pack(Core_kernel)
"src/timing_wheel_unit_tests.cmx": for-pack(Core_kernel)
"src/total_map.cmx": for-pack(Core_kernel)
"src/tuple.cmx": for-pack(Core_kernel)
"src/tuple_type.cmx": for-pack(Core_kernel)
"src/tuple_type_intf.cmx": for-pack(Core_kernel)
"src/type_equal.cmx": for-pack(Core_kernel)
"src/type_immediacy.cmx": for-pack(Core_kernel)
"src/type_immediacy_conv_unit_tests.cmx": for-pack(Core_kernel)
"src/type_immediacy_witness_unit_tests.cmx": for-pack(Core_kernel)
"src/union_find.cmx": for-pack(Core_kernel)
"src/unique_id.cmx": for-pack(Core_kernel)
"src/unique_id_intf.cmx": for-pack(Core_kernel)
"src/unit.cmx": for-pack(Core_kernel)
"src/univ.cmx": for-pack(Core_kernel)
"src/univ_map.cmx": for-pack(Core_kernel)
"src/univ_map_intf.cmx": for-pack(Core_kernel)
"src/unpack_buffer.cmx": for-pack(Core_kernel)
"src/validate.cmx": for-pack(Core_kernel)
"src/validate_unit_tests.cmx": for-pack(Core_kernel)
"src/validated.cmx": for-pack(Core_kernel)
"src/validated_intf.cmx": for-pack(Core_kernel)
"src/with_return.cmx": for-pack(Core_kernel)
"src/word_size.cmx": for-pack(Core_kernel)
<src/core_kernel.{cma,cmxa}>: use_libcore_kernel_stubs
<src/*.ml{,i,y}>: package(bin_prot)
<src/*.ml{,i,y}>: package(fieldslib)
<src/*.ml{,i,y}>: package(num)
<src/*.ml{,i,y}>: package(ppx_assert.runtime-lib)
<src/*.ml{,i,y}>: package(ppx_bench.runtime-lib)
<src/*.ml{,i,y}>: package(ppx_expect.collector)
<src/*.ml{,i,y}>: package(ppx_inline_test.runtime-lib)
<src/*.ml{,i,y}>: package(result)
<src/*.ml{,i,y}>: package(sexplib)
<src/*.ml{,i,y}>: package(typerep)
<src/*.ml{,i,y}>: package(variantslib)
"src/bigstring_marshal_stubs.c": package(bin_prot)
"src/bigstring_marshal_stubs.c": package(fieldslib)
"src/bigstring_marshal_stubs.c": package(num)
"src/bigstring_marshal_stubs.c": package(ppx_assert.runtime-lib)
"src/bigstring_marshal_stubs.c": package(ppx_bench.runtime-lib)
"src/bigstring_marshal_stubs.c": package(ppx_expect.collector)
"src/bigstring_marshal_stubs.c": package(ppx_inline_test.runtime-lib)
"src/bigstring_marshal_stubs.c": package(result)
"src/bigstring_marshal_stubs.c": package(sexplib)
"src/bigstring_marshal_stubs.c": package(typerep)
"src/bigstring_marshal_stubs.c": package(variantslib)
"src/bigstring_stubs.c": package(bin_prot)
"src/bigstring_stubs.c": package(fieldslib)
"src/bigstring_stubs.c": package(num)
"src/bigstring_stubs.c": package(ppx_assert.runtime-lib)
"src/bigstring_stubs.c": package(ppx_bench.runtime-lib)
"src/bigstring_stubs.c": package(ppx_expect.collector)
"src/bigstring_stubs.c": package(ppx_inline_test.runtime-lib)
"src/bigstring_stubs.c": package(result)
"src/bigstring_stubs.c": package(sexplib)
"src/bigstring_stubs.c": package(typerep)
"src/bigstring_stubs.c": package(variantslib)
"src/core_array_stubs.c": package(bin_prot)
"src/core_array_stubs.c": package(fieldslib)
"src/core_array_stubs.c": package(num)
"src/core_array_stubs.c": package(ppx_assert.runtime-lib)
"src/core_array_stubs.c": package(ppx_bench.runtime-lib)
"src/core_array_stubs.c": package(ppx_expect.collector)
"src/core_array_stubs.c": package(ppx_inline_test.runtime-lib)
"src/core_array_stubs.c": package(result)
"src/core_array_stubs.c": package(sexplib)
"src/core_array_stubs.c": package(typerep)
"src/core_array_stubs.c": package(variantslib)
"src/core_gc_stubs.c": package(bin_prot)
"src/core_gc_stubs.c": package(fieldslib)
"src/core_gc_stubs.c": package(num)
"src/core_gc_stubs.c": package(ppx_assert.runtime-lib)
"src/core_gc_stubs.c": package(ppx_bench.runtime-lib)
"src/core_gc_stubs.c": package(ppx_expect.collector)
"src/core_gc_stubs.c": package(ppx_inline_test.runtime-lib)
"src/core_gc_stubs.c": package(result)
"src/core_gc_stubs.c": package(sexplib)
"src/core_gc_stubs.c": package(typerep)
"src/core_gc_stubs.c": package(variantslib)
"src/exn_stubs.c": package(bin_prot)
"src/exn_stubs.c": package(fieldslib)
"src/exn_stubs.c": package(num)
"src/exn_stubs.c": package(ppx_assert.runtime-lib)
"src/exn_stubs.c": package(ppx_bench.runtime-lib)
"src/exn_stubs.c": package(ppx_expect.collector)
"src/exn_stubs.c": package(ppx_inline_test.runtime-lib)
"src/exn_stubs.c": package(result)
"src/exn_stubs.c": package(sexplib)
"src/exn_stubs.c": package(typerep)
"src/exn_stubs.c": package(variantslib)
"src/hash_stubs.c": package(bin_prot)
"src/hash_stubs.c": package(fieldslib)
"src/hash_stubs.c": package(num)
"src/hash_stubs.c": package(ppx_assert.runtime-lib)
"src/hash_stubs.c": package(ppx_bench.runtime-lib)
"src/hash_stubs.c": package(ppx_expect.collector)
"src/hash_stubs.c": package(ppx_inline_test.runtime-lib)
"src/hash_stubs.c": package(result)
"src/hash_stubs.c": package(sexplib)
"src/hash_stubs.c": package(typerep)
"src/hash_stubs.c": package(variantslib)
"src/heap_block_stubs.c": package(bin_prot)
"src/heap_block_stubs.c": package(fieldslib)
"src/heap_block_stubs.c": package(num)
"src/heap_block_stubs.c": package(ppx_assert.runtime-lib)
"src/heap_block_stubs.c": package(ppx_bench.runtime-lib)
"src/heap_block_stubs.c": package(ppx_expect.collector)
"src/heap_block_stubs.c": package(ppx_inline_test.runtime-lib)
"src/heap_block_stubs.c": package(result)
"src/heap_block_stubs.c": package(sexplib)
"src/heap_block_stubs.c": package(typerep)
"src/heap_block_stubs.c": package(variantslib)
"src/int_math_stubs.c": package(bin_prot)
"src/int_math_stubs.c": package(fieldslib)
"src/int_math_stubs.c": package(num)
"src/int_math_stubs.c": package(ppx_assert.runtime-lib)
"src/int_math_stubs.c": package(ppx_bench.runtime-lib)
"src/int_math_stubs.c": package(ppx_expect.collector)
"src/int_math_stubs.c": package(ppx_inline_test.runtime-lib)
"src/int_math_stubs.c": package(result)
"src/int_math_stubs.c": package(sexplib)
"src/int_math_stubs.c": package(typerep)
"src/int_math_stubs.c": package(variantslib)
"src/time_ns_stubs.c": package(bin_prot)
"src/time_ns_stubs.c": package(fieldslib)
"src/time_ns_stubs.c": package(num)
"src/time_ns_stubs.c": package(ppx_assert.runtime-lib)
"src/time_ns_stubs.c": package(ppx_bench.runtime-lib)
"src/time_ns_stubs.c": package(ppx_expect.collector)
"src/time_ns_stubs.c": package(ppx_inline_test.runtime-lib)
"src/time_ns_stubs.c": package(result)
"src/time_ns_stubs.c": package(sexplib)
"src/time_ns_stubs.c": package(typerep)
"src/time_ns_stubs.c": package(variantslib)
# OASIS_STOP
<src/*.ml{,i}>: open_result_wrapper
<src/result_wrapper.*>: -open_result_wrapper
<src/core_kernel.*>: -open_result_wrapper
<src/core_result.*>: -open_result_wrapper
<src/monad.*>: -open_result_wrapper
<src/monad_intf.*>: -open_result_wrapper
<src/stable_module_types.*>: -open_result_wrapper
<src/core_list.*>: -open_result_wrapper
<src/container.*>: -open_result_wrapper
<src/stable_unit_test_intf.*>: -open_result_wrapper
<src/applicative.*>: -open_result_wrapper
<src/applicative_intf.*>: -open_result_wrapper
